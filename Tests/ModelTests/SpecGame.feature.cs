// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.ModelTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SpecGame")]
    public partial class SpecGameFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SpecGame.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SpecGame", "In order to have some fun\r\nAs a game junkie\r\nI want to have rules checked when pl" +
                    "aying Tic-Tac-Toe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("New game begins")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void NewGameBegins()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New game begins", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Then("player to move is \"Circle\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("play mode is \"Playing\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Circle makes first move")]
        public virtual void CircleMakesFirstMove()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Circle makes first move", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table1.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
#line 14
 testRunner.When("Player makes move", ((string)(null)), table1, "When ");
#line 17
 testRunner.Then("player to move is \"Cross\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("play mode is \"Playing\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Circle makes invalid third move")]
        public virtual void CircleMakesInvalidThirdMove()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Circle makes invalid third move", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table2.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
            table2.AddRow(new string[] {
                        "Cross",
                        "A",
                        "Three"});
            table2.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
#line 22
 testRunner.When("Players play moves", ((string)(null)), table2, "When ");
#line 27
 testRunner.Then("player to move is \"Circle\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.And("play mode is \"Playing\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Circle wins game in columns")]
        public virtual void CircleWinsGameInColumns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Circle wins game in columns", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table3.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
            table3.AddRow(new string[] {
                        "Cross",
                        "A",
                        "Three"});
            table3.AddRow(new string[] {
                        "Circle",
                        "B",
                        "One"});
            table3.AddRow(new string[] {
                        "Cross",
                        "B",
                        "Three"});
            table3.AddRow(new string[] {
                        "Circle",
                        "C",
                        "One"});
#line 32
 testRunner.When("Players play moves", ((string)(null)), table3, "When ");
#line 39
 testRunner.Then("play mode is \"CircleWon\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cross wins game in rows")]
        public virtual void CrossWinsGameInRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cross wins game in rows", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table4.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
            table4.AddRow(new string[] {
                        "Cross",
                        "B",
                        "One"});
            table4.AddRow(new string[] {
                        "Circle",
                        "A",
                        "Two"});
            table4.AddRow(new string[] {
                        "Cross",
                        "B",
                        "Two"});
            table4.AddRow(new string[] {
                        "Circle",
                        "C",
                        "One"});
            table4.AddRow(new string[] {
                        "Cross",
                        "B",
                        "Three"});
#line 43
 testRunner.When("Players play moves", ((string)(null)), table4, "When ");
#line 51
 testRunner.Then("play mode is \"CrossWon\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cross wins game in contra diagonal")]
        public virtual void CrossWinsGameInContraDiagonal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cross wins game in contra diagonal", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table5.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
            table5.AddRow(new string[] {
                        "Cross",
                        "A",
                        "Three"});
            table5.AddRow(new string[] {
                        "Circle",
                        "A",
                        "Two"});
            table5.AddRow(new string[] {
                        "Cross",
                        "B",
                        "Two"});
            table5.AddRow(new string[] {
                        "Circle",
                        "C",
                        "Three"});
            table5.AddRow(new string[] {
                        "Cross",
                        "C",
                        "One"});
#line 55
 testRunner.When("Players play moves", ((string)(null)), table5, "When ");
#line 63
 testRunner.Then("play mode is \"CrossWon\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Circle wins game in diagonal and no move is possible after win")]
        public virtual void CircleWinsGameInDiagonalAndNoMoveIsPossibleAfterWin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Circle wins game in diagonal and no move is possible after win", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table6.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
            table6.AddRow(new string[] {
                        "Cross",
                        "A",
                        "Three"});
            table6.AddRow(new string[] {
                        "Circle",
                        "B",
                        "Two"});
            table6.AddRow(new string[] {
                        "Cross",
                        "B",
                        "Three"});
            table6.AddRow(new string[] {
                        "Circle",
                        "C",
                        "Three"});
#line 67
 testRunner.When("Players play moves", ((string)(null)), table6, "When ");
#line 74
 testRunner.Then("play mode is \"CircleWon\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table7.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
#line 75
 testRunner.When("Player makes move", ((string)(null)), table7, "When ");
#line 78
 testRunner.Then("play mode is \"CircleWon\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Game is drawn and no move is possible after draw")]
        public virtual void GameIsDrawnAndNoMoveIsPossibleAfterDraw()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game is drawn and no move is possible after draw", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("New game starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table8.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
            table8.AddRow(new string[] {
                        "Cross",
                        "A",
                        "Three"});
            table8.AddRow(new string[] {
                        "Circle",
                        "B",
                        "One"});
            table8.AddRow(new string[] {
                        "Cross",
                        "B",
                        "Three"});
            table8.AddRow(new string[] {
                        "Circle",
                        "C",
                        "Three"});
            table8.AddRow(new string[] {
                        "Cross",
                        "C",
                        "One"});
            table8.AddRow(new string[] {
                        "Circle",
                        "C",
                        "Two"});
            table8.AddRow(new string[] {
                        "Cross",
                        "B",
                        "One"});
            table8.AddRow(new string[] {
                        "Circle",
                        "B",
                        "Two"});
#line 82
 testRunner.When("Players play moves", ((string)(null)), table8, "When ");
#line 93
 testRunner.Then("play mode is \"Draw\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Player",
                        "Line",
                        "Column"});
            table9.AddRow(new string[] {
                        "Circle",
                        "A",
                        "One"});
#line 94
 testRunner.When("Player makes move", ((string)(null)), table9, "When ");
#line 97
 testRunner.Then("play mode is \"Draw\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
